set nocompatible              " 去除VI一致性,必须
filetype plugin on
syntax on

" 设置包括vundle和初始化相关的runtime path
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" 另一种选择, 指定一个vundle安装插件的路径
"call vundle#begin('~/some/path/here')

" 让vundle管理插件版本,必须
Plugin 'VundleVim/Vundle.vim'

" 以下范例用来支持不同格式的插件安装.
" 请将安装插的命令放在vundle#begin和vundle#end之间.
" Github上的插件
" 格式为 Plugin '用户名/插件仓库名'
Plugin 'tpope/vim-fugitive'
" 来自 http://vim-scripts.org/vim/scripts.html 的插件
" Plugin '插件名称' 实际上是 Plugin 'vim-scripts/插件仓库名' 只是此处的用户名可以省略
Plugin 'L9'
" 由Git支持但不再github上的插件仓库 Plugin 'git clone 后面的地址'
Plugin 'git://git.wincent.com/command-t.git'
" 本地的Git仓库(例如自己的插件) Plugin 'file:///+本地插件仓库绝对路径'
"Plugin 'file:///home/gmarik/path/to/plugin'
" 插件在仓库的子目录中.
" 正确指定路径用以设置runtimepath. 以下范例插件在sparkup/vim目录下
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" 避免插件名冲突,例如L9已存在,则可以指定
Plugin 'user/L9', {'name': 'newL9'}

" 你的所有插件需要在下面这行之前
call vundle#end()            " 必须
filetype plugin indent on    " 必须 加载vim自带和插件相应的语法和文件类型相关脚本
" 忽视插件改变缩进,可以使用以下替代:
filetype plugin on
"
" 简要帮助文档
" :PluginList       - 列出所有已配置的插件
" :PluginInstall    - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate
" :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存
" :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件
"
" 查阅 :h vundle 获取更多细节和wiki以及FAQ
" 将你自己对非插件片段放在这行之后



" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif



set encoding=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
 
set langmenu=zh_CN.UTF-8

syntax enable 
syntax on
 
 
set selection=exclusive
set selectmode=mouse,key
 
 
set nocompatible
 
set softtabstop=4
set shiftwidth=4
set autoindent
set cindent
if &term=="xterm"
    set t_Co=4
    set t_Sb=^[[4%dm
    set t_Sf=^[[3%dm
endif
 
filetype on


set shell=bash
set ffs=unix,dos,mac
set number

set nobackup
set noswapfile
"搜索忽略大小写
"set ignorecase
"set linespace=0
"" 增强模式中的命令行自动完成操作
set wildmenu


set cul "高亮光标所在行
set cuc
set shortmess=atI " 启动的时候不显示那个援助乌干达儿童的提示
set go= " 不要图形按钮
"color desert " 设置背景主题
"color ron " 设置背景主题
"colorscheme solarized
"colorscheme torte
"colorscheme desert 
"color koehler " 设置背景主题
colorscheme desert 
""color torte " 设置背景主题
"set guifont=Courier_New:h10:cANSI " 设置字体
""autocmd InsertLeave * se nocul " 用浅色高亮当前行
autocmd InsertEnter * se cul " 用浅色高亮当前行
set ruler " 显示标尺
set showcmd " 输入的命令显示出来，看的清楚些
"set whichwrap+=<,>,h,l " 允许backspace和光标键跨越行边界(不建议)
set scrolloff=3 " 光标移动到buffer的顶部和底部时保持3行距离
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")} "状态行显示的内容
set laststatus=2 " 启动显示状态行(1),总是显示状态行(2)
set foldenable " 允许折叠
""set foldmethod=manual " 手动折叠 

set hlsearch

set helplang=cn
" 总是显示状态行
set cmdheight=2


set showmatch
set matchtime=1
set completeopt=longest,menu
set termencoding=utf-8
set fileencodings=utf8,ucs-bom,gbk,chinese,cp936,gb2312,gb18030

set paste


let Tlist_Ctags_Cmd="/usr/bin/ctags"
nnoremap <C-]> <Esc>g]

"let Tlist_Auto_Open=1

"'mapleader'进行设置，缺省为'\'

nmap ,w :w<CR>
nmap ,c :close<CR>
nmap ,o :only<CR>
nmap ,q :qa<CR>
nmap ,p :prev<CR> 
nmap ,n :n<CR> 
nmap ,wp :wp<CR> 
nmap ,wn :wn<CR> 
nmap ,e :e ~/.vimrc<CR>

nmap ,t :Tlist<CR>
nmap ,T :TagbarToggle<CR>

nmap ,z zfv{
"nmap ,b :!ctags -R --c++-kinds=+p --fields=+liaS --extra=+q .<CR>
nmap ,b :e ~/.bashrc<CR>
nmap ,r :!python %<CR>

nmap ,s :tselect<CR>
nmap ,on :syntax on<CR>
nmap ,of :syntax off<CR>

set ts=4
set expandtab



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头
autocmd BufNewFile *.cpp,*.cc,*.[ch],*.hpp,*.sh,*.rb,*.java,*.py,*.js,*.ts exec ":call SetTitle()"
""定义函数SetTitle，自动插入文件头
func SetTitle()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1,"\#!/usr/bin/env bash")
        call append(line("."),   "########################################################################")
        call append(line(".")+1, "#    File Name: ".expand("%"))
        call append(line(".")+2, "# ")
        call append(line(".")+3, "#       Author: Taomee Shanghai,Inc.")
        call append(line(".")+4, "#         Mail: eden@taomee.com")
        call append(line(".")+5, "# Created Time: ".strftime("%c"))
        call append(line(".")+6, "#  Description: ...")
        call append(line(".")+7, "# ")
        call append(line(".")+8, "########################################################################")
        call append(line(".")+9, "")
        call append(line(".")+10, "")
    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."),"# -*- coding=utf-8 -*-")
        call append(line(".")+1, "########################################################################")
        call append(line(".")+2, "#    File Name: ".expand("%"))
        call append(line(".")+3, "# ")
        call append(line(".")+4, "#       Author: Taomee Shanghai,Inc.")
        call append(line(".")+5, "#         Mail: eden@taomee.com")
        call append(line(".")+6, "# Created Time: ".strftime("%c"))
        call append(line(".")+7, "#  Description: ...")
        call append(line(".")+8, "#                ")
        call append(line(".")+9, "########################################################################")
        call append(line(".")+10, "")
        call append(line(".")+11, "")
        call append(line(".")+12, "if __name__ == '__main__':")
        call append(line(".")+13, "\tpass")
    elseif &filetype == 'py'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."),"# -*- coding=utf-8 -*-")
        call append(line(".")+1, "########################################################################")
        call append(line(".")+2, "#    File Name: ".expand("%"))
        call append(line(".")+3, "# ")
        call append(line(".")+4, "#       Author: Taomee Shanghai,Inc.")
        call append(line(".")+5, "#         Mail: eden@taomee.com")
        call append(line(".")+6, "# Created Time: ".strftime("%c"))
        call append(line(".")+7, "#  Description: ...")
        call append(line(".")+8, "#                ")
        call append(line(".")+9, "########################################################################")
        call append(line(".")+10, "")
        call append(line(".")+11, "")
        call append(line(".")+12, "if __name__ == '__main__':")
        call append(line(".")+13, "\tpass")
    elseif &filetype == 'lua'
        call setline(1,"-------------------------------------------------------------------------")
        call append(line("."), "--    File Name: ".expand("%"))
        call append(line(".")+1, "-- ")
        call append(line(".")+2, "--       Author: Taomee Shanghai,Inc.")
        call append(line(".")+3, "--         Mail: eden@taomee.com")
        call append(line(".")+4, "-- Created Time: ".strftime("%c"))
        call append(line(".")+5, "--  Description: ...")
        call append(line(".")+6, "-- ")
        call append(line(".")+7, "--")
        call append(line(".")+8, "-------------------------------------------------------------------------")
        call append(line(".")+9, "")
    elseif &filetype == 'ruby'
        call setline(1,"#!/usr/bin/env ruby")
        call append(line("."),"# encoding: utf-8")
        call append(line(".")+1, "")
    else
        call setline(1, "/*")
        call append(line("."),   " *************************************************************************")
        call append(line(".")+1, " *    File Name:  ".expand("%"))
        call append(line(".")+2, " *       Author: Taomee Shanghai,Inc.")
        call append(line(".")+3, " *         Mail: eden@taomee.com")
        call append(line(".")+4, " * Created Time: ".strftime("%c"))
        call append(line(".")+5, " * ")
        call append(line(".")+6, " *  Description: ...")
        call append(line(".")+7, " * ")
        call append(line(".")+8, " ************************************************************************")
        call append(line(".")+9, "*/")
        call append(line(".")+10, "")
    endif
    if expand("%:e") == 'cpp'
        call append(line(".")+10, "#include<iostream>")
        call append(line(".")+11, "using namespace std;")
        call append(line(".")+12, "")
    elseif expand("%:e") == 'cc'
        call append(line(".")+10, "#include<iostream>")
        call append(line(".")+11, "using namespace std;")
        call append(line(".")+12, "")
    endif
    if &filetype == 'c'
        call append(line(".")+10, "#include<stdio.h>")
        call append(line(".")+11, "")
    endif
    if expand("%:e") == 'h'
        call append(line(".")+10, "#ifndef __".toupper(expand("%:r"))."__H")
        call append(line(".")+11, "#define __".toupper(expand("%:r"))."__H")
        call append(line(".")+12, "#endif")
    elseif expand("%:e") == 'hpp'
        call append(line(".")+10, "#ifndef __".toupper(expand("%:r"))."__H")
        call append(line(".")+11, "#define __".toupper(expand("%:r"))."__H")
        call append(line(".")+12, "#endif")
    endif
    if &filetype == 'java'
        call append(line(".")+10,"public class ".expand("%:r"))
        call append(line(".")+11,"")
    endif
    "新建文件后，自动定位到文件末尾
endfunc
autocmd BufNewFile * normal G

set nocp

set foldenable
"set foldmethod=indent 
set foldmethod=manual
"set foldmethod=syntax

set paste

autocmd BufRead \d\+-\(\w\+\)-\d\{6\}-\d\{4\}  set filetype=log

autocmd BufRead *.proto set filetype=proto

let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_briefTag_pre="@synopsis  "
let g:DoxygenToolkit_paramTag_pre="@param "
let g:DoxygenToolkit_returnTag="@return   "
let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
let g:DoxygenToolkit_blockFooter="----------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName="eden"

autocmd BufNewFile,BufRead *.cc,*.c,*.h,*.hpp inoremap ,p <ESC>:Dox<CR>i | nnoremap ,p :Dox<CR> | vnoremap ,p :Dox<CR>


set previewheight=10		" set gdb window initial height
run macros/gdb_mappings.vim	" source key mappings listed in this
"set asm=0				" don't show any assembly stuff
"set gdbprg=/usr/bin/gdb          " set GDB invocation string (default 'gdb')

set mouse-=a



"let g:pep8_map=',8'

filetype on            " enables filetype detection
filetype plugin on     " enables filetype specific plugins
let g:pydiction_location = '~/.vim/tools/pydiction/complete-dict'



Bundle "icholy/typescript-tools.git"
au BufRead,BufNewFile *.ts setlocal filetype=typescript
au BufRead,BufNewFile *.ts set filetype=typescript

au BufRead,BufNewFile *.js set syntax=jquery
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery
let Tlist_JS_Settings = 'javascript;s:string;a:array;o:object;f:function'






"leader映射为逗号“,”
let mapleader = ","  


"           YouCompleteMe配置                        *
"*****************************************************
Bundle 'Valloric/YouCompleteMe'

if !exists("g:ycm_semantic_triggers")
   let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']
set completeopt-=preview

"配置默认的ycm_extra_conf.py
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py' 
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py' 

"按jb 会跳转到定义
nnoremap <leader>jl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>jf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

"打开vim时不再询问是否加载ycm_extra_conf.py配置
let g:ycm_confirm_extra_conf=0   

"使用ctags生成的tags文件
let g:ycm_collect_identifiers_from_tags_files = 0  " 占内存太厉害 

map ,yd :YcmDiags<CR>

"*****************************************************
"           Syntastic配置                            *
"*****************************************************
let g:syntastic_check_on_open = 1
let g:syntastic_cpp_include_dirs = ['/usr/include/', '/usr/local/include/', '/usr/include/c++/4.6', '/usr/include/linux', '/usr/include/libxml2/', '/usr/include/x86_64-linux-gnu', '/usr/include/c++/4.6/x86_64-linux-gnu/', '/usr/include/glib-2.0/', '/usr/include/glib-2.0/gio/', '/usr/include/glib-2.0/glib/', '/usr/include/glib-2.0/gobject/', '/usr/local/include/google/', '/usr/local/include/google/protobuf/', '/usr/local/include/async_serv/', '/usr/local/include/serverbench/', '/usr/include/libtaomee/', '/usr/include/libtaomee++/', '/usr/share/st3rd_pkg/', '/opt/eden/workspace/svn/aturtle/server/base/', '/opt/eden/workspace/svn/aturtle/server/proto/trunk/src/', '/opt/eden/workspace/svn/aturtle/server/tools/framework/libtaomee', '/opt/eden/workspace/svn/aturtle/server/tools/framework/libtaomee++', '/opt/eden/workspace/svn/aturtle/server/tools/framework/asynserv', '/opt/eden/workspace/svn/aturtle/server/tools/framework/serverbench_v2', ]
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'

"set error or warning signs
let g:syntastic_error_symbol = 'x'
let g:syntastic_warning_symbol = '!'

"whether to show balloons
let g:syntastic_enable_balloons = 1

"开启语义补全
let g:ycm_seed_identifiers_with_syntax = 1

let g:ycm_cache_omnifunc=0

"在注释中也可以补全
let g:ycm_complete_in_comments=1
let g:ycm_complete_in_strings = 1

"输入第一个字符就开始补全
let g:ycm_min_num_of_chars_for_completion=1

let g:ycm_filetype_whitelist = { '*': 1 }
let g:ycm_show_diagnostics_ui = 1
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 1
let g:ycm_echo_current_diagnostic = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_server_keep_logfiles = 1
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_key_detailed_diagnostics = '<leader>d'

let g:ycm_goto_buffer_command = 'horizontal-split'
"`[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab',

let g:ycm_disable_for_files_larger_than_kb = 512

"*****************************************************

set tags+=./tags,../tags,../../tags,../../../tags,/usr/include/c++/4.6/cpp.tags,/usr/include/linux/tags,/usr/include/x86_64-linux-gnu/tags
"set tags+=./tags,/opt/eden/workspace/git/github/node,/usr/include/c++/4.6/cpp.tags,/usr/include/linux/tags,/usr/include/x86_64-linux-gnu/tags,/opt/eden/workspace/svn/aturtle/server/online/trunk/src/tags,/opt/eden/workspace/svn/aturtle/server/db/trunk/src/tags,/opt/eden/workspace/svn/aturtle/server/gateway/trunk/src/tags,/opt/eden/workspace/svn/aturtle/server/switch/trunk/src/tags,/opt/eden/workspace/svn/aturtle/server/login/trunk/src/tags,/opt/eden/workspace/svn/aturtle/server/base/tags,/opt/eden/workspace/svn/aturtle/server/tools/framework/tags,/opt/eden/workspace/svn/aturtle/server/proto/trunk/src/tags,/opt/eden/workspace/svn/aturtle/server/tags



let g:AutoOpenWinManager = 0

"execute pathogen#infect()

:set runtimepath^=~/.vim/bundle/vim-node/

autocmd User Node if &filetype == "javascript" | setlocal expandtab | endif

autocmd User Node
  \ if &filetype == "javascript" |
  \   nmap <buffer> <C-w>f <Plug>NodeVSplitGotoFile |
  \   nmap <buffer> <C-w><C-f> <Plug>NodeVSplitGotoFile |
  \ endif


"添加字典文件 
au FileType javascript set dictionary+='~/.vim/bundle/vim-node/dict/node.dict'


nnoremap <leader>j :%!python -m json.tool<CR>

autocmd BufNewFile,BufRead *.html,*.htm,*.css,*.js set noexpandtab tabstop=2 shiftwidth=2 ts=2 expandtab

highlight ColorColumn ctermbg=yellow guibg=magenta
set colorcolumn=80

"highlight ColorColumn ctermbg=magenta "set to whatever you like
"call matchadd('ColorColumn', '\%81v', 100) "set column nr

set autoread

let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_check_on_open = 1
